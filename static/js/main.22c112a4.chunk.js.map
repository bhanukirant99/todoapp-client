{"version":3,"sources":["components/Navigation/Navigation.js","components/Signin/Signin.js","components/Register/Register.js","components/Todo/ListItems.js","components/Todo/TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","onRouteChange","isSignedIn","style","display","justifyContent","onClick","className","Signin","props","onEmailChange","event","setState","signInEmail","target","value","onPasswordChange","signInPassword","onSubmitSignIn","fetch","method","headers","body","JSON","stringify","email","state","password","then","response","json","user","loadUser","catch","e","alert","this","id","htmlFor","type","name","onChange","React","Component","Register","onNameChange","ListItems","todos","deleteItem","setUpdate","handleCheck","completed","listItems","map","todo","key","_id","description","icon","duration","easing","library","add","faTrash","TodoApp","addItem","console","log","preventDefault","newItem","currentItem","userid","sendUser","newtodos","handleInput","todoid","filteredTodos","filter","res","text","onSubmit","placeholder","particlesOptions","particles","number","density","enable","value_area","App","uptodos","onInputChange","input","route","term","params","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.22c112a4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Navigation = ({ onRouteChange, isSignedIn }) => {\r\n    if (isSignedIn) {\r\n      return (\r\n        <nav style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n          <p onClick={() => onRouteChange('signout')} className='f3 link dim black underline pa3 pointer'>Sign Out</p>\r\n        </nav>\r\n      );\r\n    } else {\r\n      return (\r\n        <nav style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n          <p onClick={() => onRouteChange('signin')} className='f3 link dim black underline pa3 pointer'>Sign In</p>\r\n          <p onClick={() => onRouteChange('register')} className='f3 link dim black underline pa3 pointer'>Register</p>\r\n        </nav>\r\n      );\r\n    }\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\n\r\nclass Signin extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      signInEmail: '',\r\n      signInPassword: ''\r\n    }\r\n  }\r\n\r\n  onEmailChange = (event) => {\r\n    this.setState({signInEmail: event.target.value})\r\n  }\r\n\r\n  onPasswordChange = (event) => {\r\n    this.setState({signInPassword: event.target.value})\r\n  }\r\n\r\n  onSubmitSignIn = () => {\r\n    fetch('http://localhost:3000/signin', {\r\n      method: 'post',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n        email: this.state.signInEmail,\r\n        password: this.state.signInPassword\r\n      })\r\n    })\r\n      .then(response => response.json())\r\n      .then(user => {\r\n        if (user) {\r\n          this.props.loadUser(user)\r\n          this.props.onRouteChange('home');\r\n        }\r\n      }).catch((e) => {\r\n        alert('Invalid credentials')\r\n      })\r\n  }\r\n\r\n  // loadUser = () => {\r\n  //   fetch('http://localhost:3000/users', {\r\n  //     method: 'get',\r\n  //     headers: {'Content-Type': 'application/json'},\r\n  //   }).then((users) => console.log(users))\r\n  // }\r\n\r\n  render() {\r\n    const { onRouteChange } = this.props;\r\n    return (\r\n      <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n        <main className=\"pa4 black-80\">\r\n          <div className=\"measure\">\r\n            <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n              <legend className=\"f1 fw6 ph0 mh0\">Sign In</legend>\r\n              <div className=\"mt3\">\r\n                <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                <input\r\n                  className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                  type=\"email\"\r\n                  name=\"email-address\"\r\n                  id=\"email-address\"\r\n                  onChange={this.onEmailChange}\r\n                />\r\n              </div>\r\n              <div className=\"mv3\">\r\n                <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                <input\r\n                  className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  id=\"password\"\r\n                  onChange={this.onPasswordChange}\r\n                />\r\n              </div>\r\n            </fieldset>\r\n            <div className=\"\">\r\n              <input\r\n                onClick={this.onSubmitSignIn}\r\n                className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\"\r\n                type=\"submit\"\r\n                value=\"Sign in\"\r\n              />\r\n            </div>\r\n            <div className=\"lh-copy mt3\">\r\n              <p  onClick={() => onRouteChange('register')} className=\"f6 link dim black db pointer\">Register</p>\r\n            </div>\r\n          </div>\r\n        </main>\r\n      </article>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Signin;","import React from 'react';\r\n\r\nclass Register extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: '',\r\n      password: '',\r\n      name: ''\r\n    }\r\n  }\r\n\r\n  onNameChange = (event) => {\r\n    this.setState({name: event.target.value})\r\n  }\r\n\r\n  onEmailChange = (event) => {\r\n    this.setState({email: event.target.value})\r\n  }\r\n\r\n  onPasswordChange = (event) => {\r\n    this.setState({password: event.target.value})\r\n  }\r\n\r\n  onSubmitSignIn = () => {\r\n    fetch('http://localhost:3000/register', {\r\n      method: 'post',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n        email: this.state.email,\r\n        password: this.state.password,\r\n        name: this.state.name\r\n      })\r\n    })\r\n      .then(response => response.json())\r\n      .then(user => {\r\n        if (user) {\r\n          this.props.loadUser(user)\r\n          this.props.onRouteChange('home');\r\n        }\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n        <main className=\"pa4 black-80\">\r\n          <div className=\"measure\">\r\n            <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n              <legend className=\"f1 fw6 ph0 mh0\">Register</legend>\r\n              <div className=\"mt3\">\r\n                <label className=\"db fw6 lh-copy f6\" htmlFor=\"name\">Name</label>\r\n                <input\r\n                  className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  id=\"name\"\r\n                  onChange={this.onNameChange}\r\n                />\r\n              </div>\r\n              <div className=\"mt3\">\r\n                <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                <input\r\n                  className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                  type=\"email\"\r\n                  name=\"email-address\"\r\n                  id=\"email-address\"\r\n                  onChange={this.onEmailChange}\r\n                />\r\n              </div>\r\n              <div className=\"mv3\">\r\n                <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                <input\r\n                  className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  id=\"password\"\r\n                  onChange={this.onPasswordChange}\r\n                />\r\n              </div>\r\n            </fieldset>\r\n            <div className=\"\">\r\n              <input\r\n                onClick={this.onSubmitSignIn}\r\n                className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\"\r\n                type=\"submit\"\r\n                value=\"Register\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </main>\r\n      </article>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Register;","import React from 'react';\r\nimport './ListItems.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction ListItems({todos, deleteItem, setUpdate, handleCheck, completed}){\r\n    const listItems = todos.map(todo =>\r\n    {\r\n        return <div className={`${completed === false ? \"list\" : \"comlist\"}`} key={todo._id}>\r\n        <p>\r\n            <span>\r\n                <input\r\n                    className=\"chicons\" \r\n                    type=\"checkbox\" \r\n                    onChange={(e) => {\r\n                        handleCheck(e.target.value, todo._id)\r\n                    }}\r\n                />\r\n            </span>\r\n            <input \r\n                type=\"text\" \r\n                id={todo._id} value={todo.description} \r\n                onChange={(e)=>{\r\n                    setUpdate(e.target.value, todo._id)\r\n                }}/>\r\n            <span>\r\n                <FontAwesomeIcon className=\"faicons\" onClick={() => {\r\n                    deleteItem(todo._id)\r\n                    // console.log(todo)\r\n                }} icon=\"trash\" />\r\n            </span>\r\n        </p>\r\n        </div>})\r\n        return( \r\n            <div>\r\n                <FlipMove duration={300} easing=\"ease-in-out\">\r\n                    {listItems}\r\n                </FlipMove>\r\n            </div>\r\n        );\r\n    }\r\n\r\n  export default ListItems;","import React from 'react';\r\nimport './TodoApp.css';\r\nimport ListItems from './ListItems'\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(faTrash)\r\n\r\nclass TodoApp extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    // initItems(this.props.sendUser);\r\n    this.state = {\r\n      todos:[...this.props.sendUser.todos],\r\n      // items:[],\r\n\r\n      currentItem:{\r\n        description: '',\r\n        completed: false\r\n      }\r\n    }\r\n    // this.initItems = this.initItems.bind(this)\r\n  }\r\n  // console.log(this.props.sendUser)\r\n\r\n  // initItems = (props.sendUser) => {\r\n\r\n  // }\r\n\r\n  addItem = (e) => {\r\n    console.log(this.state.todos)\r\n    // console.log(this.props.sendUser.id)\r\n    e.preventDefault();\r\n    const newItem = this.state.currentItem;\r\n    // console.log(this.state.currentItem)\r\n    console.log(newItem)\r\n    if(newItem.description !==\"\"){\r\n      fetch('http://localhost:3000/addtodo', {\r\n      method: 'post',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n        description: newItem,\r\n        userid: this.props.sendUser.id\r\n      })\r\n    })\r\n      .then(response => response.json())\r\n      .then(user => {\r\n        if (user) {\r\n          console.log(user)\r\n        }\r\n      })\r\n      const newtodos = [...this.state.todos, newItem];\r\n    this.setState({\r\n      todos: this.props.sendUser,\r\n      todos: newtodos,\r\n      currentItem:{\r\n        description:'',\r\n        completed: false\r\n      }\r\n    })\r\n    }\r\n    // console.log(this.state.items)\r\n  }\r\n\r\n  handleInput = (e) => {\r\n    \r\n    this.setState({\r\n      currentItem:{\r\n        description: e.target.value,\r\n      }\r\n    })\r\n    // console.log(this.state.currentItem)\r\n  }\r\n\r\n  handleCheck = (e, id) => {\r\n    // console.log(e)\r\n    if (e === 'on') {\r\n      if (this.state.currentItem.completed === false) {\r\n        this.setState({\r\n          currentItem:{\r\n            completed: true\r\n          }\r\n        })\r\n      } else if (this.state.currentItem.completed === true) {\r\n        this.setState({\r\n          currentItem:{\r\n            completed: false\r\n          }\r\n        })\r\n      }\r\n    }\r\n    const newItem = this.state.currentItem.completed;\r\n    // console.log(this.state.currentItem)\r\n    console.log(newItem)\r\n    if(newItem){\r\n      fetch('http://localhost:3000/checktodo', {\r\n      method: 'put',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n        completed: newItem,\r\n        userid: this.props.sendUser.id,\r\n        todoid: id\r\n      })\r\n    })\r\n      .then(response => response.json())\r\n      .then(user => {\r\n        // if (user) {\r\n          console.log(user)\r\n        // }\r\n      })\r\n      // const newtodos = [...this.state.todos, newItem];\r\n    this.setState({\r\n      // // items: this.props.sendUser,\r\n      // todos: newtodos,\r\n      currentItem:{\r\n        description:'',\r\n        completed: false\r\n      }\r\n    })\r\n    }\r\n    \r\n    // this.setState({\r\n    //   currentItem:{\r\n    //     completed: !this.state.completed\r\n    //   }\r\n    // })\r\n    console.log(this.state.currentItem.completed);\r\n  }\r\n\r\n  // checkItem = (id) => {\r\n  //   const filteredItems = this.state.todos.map(todo =>\r\n  //     todo._id===id);\r\n  //     const isItemChecked = true;\r\n  //     if(isItemChecked) {\r\n  //       // this.state.item.completed;\r\n  //     }\r\n    \r\n  // }\r\n\r\n  deleteItem = (id) => {\r\n    const filteredTodos = this.state.todos.filter(todo =>\r\n      todo._id!==id);\r\n    fetch('http://localhost:3000/deletetodo', {\r\n      method: 'put',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n        userid: this.props.sendUser.id,\r\n        todoid: id\r\n      })\r\n    })\r\n      .then(response => response.json())\r\n      .then(res => {\r\n        console.log(res)\r\n        if (res) {\r\n          console.log(res)\r\n        }\r\n      })\r\n    console.log(filteredTodos)\r\n    this.setState({\r\n      todos: filteredTodos\r\n    })\r\n  }\r\n\r\n  setUpdate = (text, id) => {\r\n    console.log(text, id)\r\n    const todos = this.state.todos;\r\n    todos.map(todo=>{      \r\n      if(todo._id===id){\r\n        todo.description = text;\r\n      }\r\n    })\r\n    this.setState({\r\n      todos: todos\r\n    }) \r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"TodoApp\">\r\n        <header>\r\n          <form id=\"to-do-form\" onSubmit={this.addItem}>\r\n            <input type=\"text\" \r\n              placeholder=\"Enter task\" \r\n              value= {this.state.currentItem.description} \r\n              onChange={this.handleInput}>\r\n            </input>\r\n            <button type=\"submit\">Add</button>\r\n          </form>\r\n          <p>{this.state.todos.description}</p>\r\n            <ListItems \r\n              todos={this.state.todos}\r\n              completed = {false}\r\n              handleCheck={this.handleCheck} \r\n              deleteItem={this.deleteItem} \r\n              setUpdate={this.setUpdate}\r\n            />          \r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default TodoApp;\r\n","// import User from '../../server/src/models/user';\r\n// import Todo from '../../server/src/models/todo';\r\n// import User from './src/models/user';\r\n// import Todo from './src/models/todo';\r\nimport React, { Component } from 'react';\r\nimport Particles from 'react-particles-js';\r\nimport Navigation from './components/Navigation/Navigation';\r\nimport Signin from './components/Signin/Signin';\r\nimport Register from './components/Register/Register';\r\nimport TodoApp from './components/Todo/TodoApp';\r\nimport Todo from './components/Todo/Todo';\r\n// import axios from 'axios';\r\nimport './App.css';\r\n// import mongoose from '../../server/src/db/mongodb';\r\n// import mongoose from './src/db/mongodb';\r\n\r\n\r\nconst particlesOptions = {\r\n  particles: {\r\n    number: {\r\n      value: 30,\r\n      density: {\r\n        enable: true,\r\n        value_area: 800\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      term: \"\",\r\n      todos: [],\r\n      input: '',\r\n      route: 'signin',\r\n      isSignedIn: false,\r\n      user: {\r\n        id: '',\r\n        name: '',\r\n        email: '',\r\n        todos: [],\r\n      }\r\n    }\r\n  }\r\n\r\n  loadUser = (user) => {\r\n    this.setState({user: {\r\n      id: user._id,\r\n      name: user.name,\r\n      email: user.email,\r\n      todos: user.todos\r\n    }})\r\n    // this.loadUser()\r\n    const todos = this.state.user.todos;\r\n    const uptodos = todos.filter(todo => {\r\n      if(todo.description !=='') {\r\n        return todo\r\n      }\r\n    })\r\n    console.log(uptodos)\r\n    // this.setState({\r\n    //   user: uptodos\r\n    // })\r\n  }\r\n\r\n  // loadUser = () => {\r\n  //  axios.get('/users').then((response) => {\r\n  //    console.log(response.users)\r\n  //  }).catch((e) => {\r\n  //    console.log(e)\r\n  //  })\r\n  // }\r\n\r\n  onInputChange = (event) => {\r\n    this.setState({input: event.target.value});\r\n  }\r\n\r\n  onRouteChange = (route) => {\r\n    if (route === 'signout') {\r\n      this.setState({isSignedIn: false})\r\n    } else if (route === 'home') {\r\n      this.setState({isSignedIn: true})\r\n    }\r\n    this.setState({route: route});\r\n  }\r\n\r\n  render() {\r\n    const { isSignedIn, route } = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n         <Particles className='particles'\r\n          params={particlesOptions}\r\n        />\r\n        <Navigation isSignedIn={isSignedIn} onRouteChange={this.onRouteChange} />\r\n        { route === 'home'\r\n          ? <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-md-6 mx-auto\">\r\n                  <h1 className=\"text-center f1 fw6 ph0 mh0\">TODO LIST</h1>\r\n                    <TodoApp sendUser={this.state.user}/>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          : (\r\n             route === 'signin'\r\n             ? <Signin loadUser={this.loadUser} onRouteChange={this.onRouteChange}/>\r\n             : <Register loadUser={this.loadUser} onRouteChange={this.onRouteChange}/>\r\n            )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}